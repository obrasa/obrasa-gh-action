#!/bin/bash
# Test script to verify native ARM64 platform support

set -e

echo "üß™ Testing native ARM64 platform support..."

# Set up test environment
export GITHUB_TOKEN="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"
TEST_DIR="$(mktemp -d)"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

echo "üìÅ Test directory: $TEST_DIR"
echo "üìÇ Script directory: $SCRIPT_DIR"

cd "$TEST_DIR"

# Copy the download script to test directory
cp "$SCRIPT_DIR/scripts/download-binary.sh" ./

echo ""
echo "üîç Test 1: Platform Detection"
echo "Current platform:"
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)
echo "  OS: $OS"
echo "  ARCH: $ARCH"

# Test platform detection logic
case "$ARCH" in
  x86_64|amd64) ARCH_NAME="amd64" ;;
  aarch64|arm64) ARCH_NAME="arm64" ;;
  *) ARCH_NAME="unknown" ;;
esac

case "$OS" in
  linux)
    EXPECTED_BINARY="mutator-linux-${ARCH_NAME}"
    ;;
  darwin)
    EXPECTED_BINARY="mutator-macos-${ARCH_NAME}"
    ;;
  *)
    EXPECTED_BINARY="unsupported"
    ;;
esac

echo "  Expected binary: $EXPECTED_BINARY"

echo ""
echo "üîç Test 2: Check Available Platforms in Latest Release"
LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
  "https://api.github.com/repos/obrasa/tree-mutator/releases/latest")

if echo "$LATEST_RELEASE" | grep -q '"tag_name"'; then
  LATEST_VERSION=$(echo "$LATEST_RELEASE" | grep '"tag_name":' | sed -E 's/.*"tag_name": "([^"]+)".*/\1/')
  echo "‚úÖ Latest release: $LATEST_VERSION"
  
  echo "üì¶ Available platform binaries:"
  PLATFORMS=(
    "mutator-linux-amd64"
    "mutator-macos-amd64"
    "mutator-macos-arm64"
  )
  
  # Temporarily disabled until ARM64 runners available for private repos
  COMING_SOON_PLATFORMS=(
    "mutator-linux-arm64"
  )
  
  for platform in "${PLATFORMS[@]}"; do
    if echo "$LATEST_RELEASE" | grep -q "${platform}-${LATEST_VERSION}.tar.gz"; then
      echo "  ‚úÖ $platform"
    else
      echo "  ‚ùå $platform (not found - will be available after next release)"
    fi
  done
  
  echo "  üöß Coming soon (when ARM64 runners available for private repos):"
  for platform in "${COMING_SOON_PLATFORMS[@]}"; do
    echo "    - $platform"
  done
else
  echo "‚ùå Could not get latest release"
fi

echo ""
echo "üîç Test 3: Test Download with Platform Fallback"
export VERSION="latest"

# Test current platform
echo "Testing download for current platform..."
if bash ./download-binary.sh; then
  echo "‚úÖ Download successful for current platform"
  
  if [ -f "mutator" ]; then
    echo "‚úÖ Binary file created"
    ls -la mutator
    
    # Show binary info
    if command -v file >/dev/null 2>&1; then
      echo "üîç Binary information:"
      file mutator
    fi
    
    # Test execution
    if [ -x "mutator" ]; then
      echo "‚úÖ Binary is executable"
      
      # Try to run it (might fail if it's for wrong architecture)
      if ./mutator --help >/dev/null 2>&1; then
        echo "‚úÖ Binary executes successfully"
      else
        echo "‚ö†Ô∏è  Binary doesn't execute (might be wrong architecture)"
      fi
    else
      echo "‚ùå Binary is not executable"
    fi
  else
    echo "‚ùå Binary file not created"
  fi
else
  echo "‚ùå Download failed"
fi

echo ""
echo "üîç Test 4: Test GitHub Actions Runner Labels"
echo "Testing GitHub Actions runner label mapping..."

RUNNER_TESTS=(
  "linux:amd64:ubuntu-latest"
  "darwin:amd64:macos-13"
  "darwin:arm64:macos-latest"
)

# Temporarily disabled until ARM64 runners available for private repos
COMING_SOON_TESTS=(
  "linux:arm64:ubuntu-24.04-arm"
)

for test_case in "${RUNNER_TESTS[@]}"; do
  IFS=':' read -r test_os test_arch expected_runner <<< "$test_case"
  echo "Testing $test_os $test_arch -> $expected_runner"
  
  # This would be the runner selection logic in our workflow
  case "$test_os:$test_arch" in
    linux:amd64) runner="ubuntu-latest" ;;
    darwin:amd64) runner="macos-13" ;;
    darwin:arm64) runner="macos-latest" ;;
    *) runner="unknown" ;;
  esac
  
  if [ "$runner" = "$expected_runner" ]; then
    echo "  ‚úÖ Correct runner selection"
  else
    echo "  ‚ùå Wrong runner selection: got $runner, expected $expected_runner"
  fi
done

echo "üöß Coming soon (when ARM64 runners available for private repos):"
for test_case in "${COMING_SOON_TESTS[@]}"; do
  IFS=':' read -r test_os test_arch expected_runner <<< "$test_case"
  echo "  - $test_os $test_arch -> $expected_runner"
done

echo ""
echo "üîç Test 5: Test All Platform Combinations"
PLATFORM_TESTS=(
  "linux:amd64:mutator-linux-amd64"
  "darwin:amd64:mutator-macos-amd64"
  "darwin:arm64:mutator-macos-arm64"
)

# Temporarily disabled until ARM64 runners available for private repos
COMING_SOON_PLATFORM_TESTS=(
  "linux:arm64:mutator-linux-arm64"
)

for test_case in "${PLATFORM_TESTS[@]}"; do
  IFS=':' read -r test_os test_arch expected_binary <<< "$test_case"
  echo "Testing $test_os $test_arch -> $expected_binary"
  
  # Test the logic
  case "$test_arch" in
    amd64) arch_name="amd64" ;;
    arm64) arch_name="arm64" ;;
  esac
  
  case "$test_os" in
    linux) binary_name="mutator-linux-${arch_name}" ;;
    darwin) binary_name="mutator-macos-${arch_name}" ;;
  esac
  
  if [ "$binary_name" = "$expected_binary" ]; then
    echo "  ‚úÖ Correct binary selection"
  else
    echo "  ‚ùå Wrong binary selection: got $binary_name, expected $expected_binary"
  fi
done

echo "üöß Coming soon (when ARM64 runners available for private repos):"
for test_case in "${COMING_SOON_PLATFORM_TESTS[@]}"; do
  IFS=':' read -r test_os test_arch expected_binary <<< "$test_case"
  echo "  - $test_os $test_arch -> $expected_binary"
done

# Cleanup
cd /
rm -rf "$TEST_DIR"

echo ""
echo "üéâ Native ARM64 platform testing completed!"
echo ""
echo "üìã Summary:"
echo "  - Platform detection tested"
echo "  - Available binaries checked"
echo "  - Download and fallback logic verified"
echo "  - GitHub Actions runner labels validated"
echo "  - All platform combinations validated"
echo ""
echo "üí° Benefits of native runners:"
echo "  - ‚úÖ No more QEMU emulation overhead"
echo "  - ‚úÖ Native performance on ARM64"
echo "  - ‚úÖ Simpler, cleaner build process"
echo "  - ‚úÖ Free for public repositories"
echo "  - ‚úÖ 4 vCPU, 16 GB RAM for public repos" 